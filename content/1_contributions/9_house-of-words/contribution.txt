Title: House of Words

----

Author: Morgan Green

----

Keywords: variables, signifiers, language, 3D

----

Category: case-study

----

Language: python

----

Gallery: 

----

Contextone: Most of the artwork I’ve exhibited for the last few years uses software I’ve coded to process language. I’m interested in how software can move words around quickly. Computational efficiency allows me to simulate the breakdown of language at incredible speeds. This exercise allows others to participate in this practice with me. Moving through the “house of words,” the program I’ve created reorients people to whatever they’ve written. Hopefully these literal shifts in perspective will help users to consider their choice of words in a different way, and also to consider the experiences of others. This project proposes that no two people speak the same language.

----

Contexttwo: This is an all-level activity for anyone with curiosity about language and control. For those who are brand new to coding, it’s also a great way to get your feet wet with some variable declarations. For anyone, regardless of coding experience, it’s a chance to look at the way you use language from a new perspective. It’s also a good starting place for anyone who is curious about coding 3D imagery with JavaScript, as most of the exercise is written in Babylon.js, a fun and powerful 3D library.

----

Contextthree: Language is an important tool for maintaining systems of power; it can also be a tool to help alter those systems. In this exercise, I ask people to define words that likely trigger different connotations for different people. Once people have defined the words, they will find themselves confronted with their own definitions. I am hoping this staged confrontation with language will help people better understand how it operates. I hope this kind of work can help people to use language in a way that challenges intersecting supremacies (white, male, cis, straight etc.), rather than upholding them.

----

Shortdesctext:

This  is an all-level activity that deals with variable declarations and assignments in JavaScript. **Variables** are one of the most important and powerful building blocks of any coding language. If you are new to coding, variable assignments are a great place to begin. This activity can be done in groups or individually. 

Those who are new to coding can simply follow the instructions and learn about variables. Those with more experience can explore the source code and learn more about **babylon.js**, a wonderful library for creating three-dimensional art with code. 

For all participants, regardless of coding level, these instructions should foster reflection on language and the way it operates in culture. This exercise suggests the possibility that **no two people speak the same language**.

Variables are containers: they can hold a variety of different values. You could imagine a variable as a tea bag, and its value as the kind of tea the bag holds. While the procedure might be the same for different kinds of tea, the flavor will vary depending on the contents of the bag. Wherever a variable appears in code, it deploys the value it contains, much as a teabag releases its flavors when placed in hot water. Variables allow programs to respond to varying stimuli differently, and this is powerful. 

This exercise encourages you to think about language, as we use it every day, in the same way. As variables hold different values, and as tea bags hold different flavors — words, too, can evoke different meanings and feelings for different people and at different times.

We’ll begin with a warmup that uses basic HTML, CSS, and Javascript, and allows you to get the hang of assigning variables. Then we’ll move on to something more complex with babylon.js in steps 2-4.

----

Bodycont:

### STEP 1: MADLIB WARM-UP

We’ll begin by assigning variable values to populate a Madlib. 

Even if you’ve never coded before, you might be familiar with the concept of a variable from taking algebra in school. In this exercise, variables hold values, just like in algebra; however, these particular variables hold text rather than numbers. 

In JavaScript, this is how you declare and assign a text variable, also known as a string:

`var pet = "cat"; `

Where the command `var` signals the declaration of a variable, `pet` is the name that references that variable, and "`cat`" is the value the variable contains. The quotation marks enclosing the value signal that it is to be read as a text (or string) value. The equals sign (`=`) assigns "`cat`" to `pet`, and the semicolon (;) terminates the line of code. 

In the syntax we’ll be using, we’ll deploy our string variables using template strings (also known as template literals). For example,  this template string would produce the sentence “My cat eats twice a day,” assuming the variable is assigned as above:

`My ${pet} eats twice a day.`

We could change the value of the variable pet using the following command

`pet = "dog"`;

And then the same code (`My ${pet} eats twice a day.`)  would produce the phrase, “My dog eats twice a day.” The symbols `${}` signal that the value of the variable with the enclosed name `pet` should replace that snippet of code. Surrounding the text in backticks (`) rather than quotes (") tells the code to look for template strings and substitute them with the appropriate values. 

You’ll be assigning two kinds of variables in this exercise: string variables which hold one value each, and **arrays**, which hold a series of string values. The code will then deploy the variables you’ve assigned using a third kind of variable: the template string.

Another important tool we’ll be using in this exercise is **code comments**. Code comments are ignored by the computer, so they allow you to explain what your code does in plain language, or to temporarily omit a line of code. In this exercise, there are additional instructions in the code comments for you to follow along.

In Javascript, you can turn text into a comment either by preceding it with // (in which case the comment will terminate at the end of the line, or by wrapping it with /* */ (e.g. **/*comment*/**). In the second case, the comment can take up multiple lines. In the code editor for this exercise, comments will most likely appear as gray text, but it depends on your settings. 

**To complete the warmup, (link: howshekilledit.com/madlib text: go to howshekilledit.com/madlib) and read the code comments for detailed instructions**. This should give you an idea of how text variables can operate within a program.

### Step 2: House of Words

In this step, rather than randomly selecting nouns, adjectives, etc. as with the madlib, you’ll be thinking about what a certain set of words means to you. Whether you are a seasoned coder or brand new, take some time to notice how the language you choose affects the experience.

The words you choose in this exercise will have a lot of power. Read on to see it all unfold! Go to howshekilledit.com/how and carefully follow the instructions in the code comments. Note the instructions on how to save your work at the bottom.

----

Bodylayout: 

----

Context: true

----

Shortdesc: true

----

Bodycontent: true

----

Layouttog: false