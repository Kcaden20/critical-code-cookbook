Title: Steps 3 & 4

----

Layouttog: false

----

Text:

### Step 3: Build Your Own Room
If you would like, you can build a room of your own, like one of the rooms in Step 2.
You have the option to write your own template string for others to populate (Option 2). Or you can just write your own small poem and fill the room with it (Option 1). 

If you don’t want to use template strings, or you feel you understand them, (link: howshekilledit.com/byo text: go ahead and proceed to howshekilledit.com/byo). Further instructions await you there. Note that instructions continue after you finish writing text. 

**This next part is an optional challenge.** 
Read on for more use cases and an explanation of template strings. 

Consider again this example, in which **pet** is assigned as a simple string variable, and **sentence** is assigned as a template string:

`var pet = "cat";
var sentence = `My ${pet} eats twice a day.`
//the above line assigns the variable called ‘sentence’ the value “My cat eats twice a day.”`

Three important symbols are colored for emphasis. The backticks `` that establish the variable as a template string, and the dollar sign $ and curly braces {} that surround the variable, allowing it to embed into the template string.

(image: image1.png)

This formatting allows the code interpreter to sub in any string value where ${pet} appears in the sentence. So if you change the value of pet, the sentence changes accordingly:

`var pet = "dog";
var sentence = `My ${pet} eats twice a day.`;
//the above line assigns the variable called ‘sentence’ the value "My dog eats twice a day."`

`var pet = "toaster";
var sentence = `My ${pet} eats twice a day.`;
//the above line assigns the variable called ‘sentence’ the value "My toaster eats twice a day."`

Here’s a different example:

`var fav_color = "purple";
var phrase = `My favorite color is ${fav_color}.`;
//the above line assigns the variable called ‘phrase’ the value "My favorite color is purple."`

Note that our variable names don’t really make a difference to the code interpreter. We could get the same results with the following: 

`var variable_1 = "purple";
var variable_2 = `My favorite color is ${variable_1}.`;
//the above line assigns the variable called ‘variable_2’ the value "My favorite color is purple."`

…BUT we can make things clearer for ourselves by giving our variables names that have meaning for us. 

(link: howshekilledit.com/byo text: You can build your own room by visiting howshekilledit.com/byo). You can also look at the code from the first two steps to see more examples in action. 

Follow the instructions under OPTION 2 in the comments. They will help you to create your own template string sentence and fill the room with it. After you’ve written your sentence, you can continue to read the comments to make additional changes to the room. 

***If you get stuck…***
Your first line of defense might be to click the “Console” button, underneath the code editor. This is likely to point you in the right direction. 

Note that the code interpreter is very different from a human brain in the following respect: it cannot understand something that is almost the type of input it expects to hear. Human brains have amazing capacity for interpolation. For example, we can interpret a few dots and lines as a smiling face :-) . While computer scientists are working on computers’ interpolative abilities, they do not come standard. So while a human who expects to see pet could easily interpret Pet as the same thing, the computer has no ability to recognize these two words as essentially the same. If it expects to see pet, it will not recognize Pet. 

Which is just to say, if you are stuck, take a careful look at the examples and the code from steps 1 and 2. See if you can match the format. One misplaced symbol can make all the difference. Once you get used to this kind of careful looking, coding starts to become easier. Persistence is at least as important to effective coding as brain power and logical thinking.

### Step 4: Share & Discuss
If you are working in a group, share each other’s houses from step 2. Spend some time with them. Note the differences and similarities in the words that populate the houses in step 2, and consider the questions below. 

If you are working individually, you can check out some other peoples’ houses at howshekilledit.com/cow and consider the questions that way. 

DISCUSSION QUESTIONS:
1. What are some of the differences and similarities in the way that you’ve defined different words?
2. Are these differences surprising? Do they tell you anything about what it might be like to occupy a different point of view, to walk in someone else’s shoes?
3. How does contextualizing what you’ve written (in longer sentences, in the space of a house) affect its meaning? How does it affect the way it feels? 

If you’ve completed step 3, have someone populate the variables for your room (or trade with your group members). Talk about what happens. 

**Close by discussing or considering how you feel after this exercise, and what observations you might take with you now that you’ve completed it. 

Would you like your work from this exercise to appear publicly so that others can experience it? **

If you would like to share any of what you’ve made, you can save it by following the instructions in the code comments. (link: howshekilledit.com/submit-how text: You are welcome to submit your link for public sharing at howshekilledit.com/submit-how). You can submit anonymously, or include your name. If approved, your links will be added to the “City of Words.” Submissions will be lightly moderated.

----

Images:

- image1.png

----

Layout: 